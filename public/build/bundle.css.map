{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\tlet pdfjs; \n\tlet Tesseract;\n\n\n\tlet files;\n\tlet canvas = document.createElement(\"canvas\");\n\tlet scale = 2;\n\tlet result = \"\";\n\tlet pageNumber = \"\";\n\tlet progress = \"\";\n\n\t//Handler to call ocr function when a file is chosen\n\tfunction handlePdf() {\n\t\tresult = \"\";\n\t\tif (files && files[0]) {\n\t\t\tlet file = files[0];\n\t\t\tlet reader = new FileReader();\n\n\t\t\treader.onload = (e) => {\n\t\t\t\tpdfjs.getDocument(reader.result).promise\n\t\t\t\t\t.then( pdf => {\n\t\t\t\t\t\tocrPdf(pdf, canvas, scale);\n\t\t\t\t\t});\n\t\t\t} \n\n\t\t\treader.readAsArrayBuffer(file);\n\t\t}\n\t}\n\n\n\t//function to call Tesseract.js on each page of pdf\n\t//First renders a page in an invisible canvas, then calls Tesseract's recognize method on that canvas\n\t//  Iterates through all pages of the pdf\n\t//\n\t//Arguments: \n\t//\tPDFDocumentProxy from a resolved pdfjs.getDocument() method\n\t//\tcanvas element\n\t//\tpdf render scale\n\tasync function ocrPdf(pdf, canvas, scale) {\n\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n\t\t\tpageNumber = i;\n\t\t\tawait pdf.getPage(i).then(page => {\n\t\t\t\tconst viewport = page.getViewport({scale: scale, rotation: 360});\n\t\t\t\tconst context = canvas.getContext(\"2d\");\n\t\t\t\t\n\t\t\t\tcanvas.height = viewport.height;\n\t\t\t\tcanvas.width = viewport.width;\n\n\t\t\t\tconst renderParameters = {\n\t\t\t\t\tcanvasContext: context,\n\t\t\t\t\tviewport: viewport,\n\t\t\t\t\tdontFlip: true,\n\t\t\t\t}\n\n\t\t\t\treturn page.render(renderParameters).promise;\n\t\t\t})\n\t\t\t\t.then( () => {\n\t\t\t\t\tconsole.log(\"STARTING OCR\")\n\n\t\t\t\t\treturn Tesseract.recognize(\n\t\t\t\t\t\tcanvas,\n\t\t\t\t\t\t'eng',\n\t\t\t\t\t\t{ logger: m => progress = m.status + \" (\" + (Math.round(m.progress*100)) + \"%)\" });\n\t\t\t\t})\n\t\t\t\t.then( ({ data: { text } }) => result += text)\n\t\t\t\tpageNumber = \"\";\n\t\t\t\tprogress = \"\";\n\t\t\t\tconsole.log(\"FINISHED OCR\");\n\t\t}\n\t}\n\n\tconst initPdfJs = () => {\n\t\tpdfjs = window['pdfjs-dist/build/pdf'];\n\t}\n\n\tconst initPdfJsWorker = () => {\n\t\tpdfjs.GlobalWorkerOptions.workerSrc = window['pdfjsWorker'];\n\t}\n\n\tconst initTesseract = () => {\n\t\tTesseract = window['Tesseract'];\n\t}\n</script>\n\n<svelte:head>\n\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.min.js\" crossorigin=\"anonymous\" on:load={initPdfJs}></script>\n\t{#if pdfjs}\n\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.worker.min.js\" crossorigin=\"anonymous\" on:load={initPdfJsWorker}></script>\n\t{/if}\n\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/tesseract.js/2.1.4/tesseract.min.js\" integrity=\"sha512-He62YiiTWJ8AGZLwlCulGxr0wOMteFAIkyZuylghbNxxwACqWVNj3xUMJWxfzvRi5+oLvLu0VEEZsE2/eKastA==\" crossorigin=\"anonymous\" on:load={initTesseract}></script>\n</svelte:head>\n\n<main>\n\t<h1>PDF OCR</h1>\n\t<p>Using PDF.js and Tesseract.js to Recognize Text in PDFs</p>\n\n\t<input type=\"file\" accept=\".pdf\" bind:files>\n\n\t{#if files && files[0]}\n\t\t<div>\n\t\t\tAccuracy: (Higher is Slower) <br> {scale} <br> <input type=range bind:value={scale} min=1 max=10>\n\t\t\t\n\t\t</div>\n\t\t<button on:click={handlePdf}>Recognize!</button>\n\n\t\t{#if progress && progress.length > 0}\n\t\t\tPage #{pageNumber}, {progress}\n\t\t{/if}\n\n\t\t{#if result && result.length > 0}\n\t\t\tRESULT <br>\n\t\t\t<div id=\"result\">\n\t\t\t\t<textarea bind:value={result}></textarea>\n\t\t\t</div>\n\t\t{/if}\n\t{/if}\n</main>\n\n<style>\n\tmain {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #4c00ff;\n\t\tfont-size: 5em;\n\t\tfont-weight: 100;\n\t}\n\n\t#result {\n\t\ttext-align: left;\n\t\tmax-width: 1000px;\n\t\tmin-width: 300px;\n\t\twidth: 75%;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t}\n\n\ttextarea {\n\t\theight: 200px;\n\t\twidth: 100%;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAwHC,IAAI,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,OAAO,cAAC,CAAC,AACR,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,MAAM,CACjB,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,AACpB,CAAC,AAED,QAAQ,cAAC,CAAC,AACT,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC"
}